apiVersion: v1
automountServiceAccountToken: false
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: 11.3.0
  name: opentelemetry-demo-grafana
  namespace: otel-demo
---
apiVersion: v1
data:
  admin-password: YWRtaW4=
  admin-user: YWRtaW4=
  ldap-toml: ''
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: 11.3.0
  name: opentelemetry-demo-grafana
  namespace: otel-demo
type: Opaque
---
apiVersion: v1
data:
  dashboardproviders.yaml: "apiVersion: 1
providers:
- disableDeletion: false

      editable: true
  folder: ""
  name: default
  options:
    path: /var/lib/grafana/dashboards/default

      orgId: 1
  type: file
"
  datasources.yaml: "apiVersion: 1
datasources:
- editable: true
  isDefault: true

      jsonData:
    exemplarTraceIdDestinations:
    - datasourceUid: webstore-traces

          name: trace_id
    - name: trace_id
      url: http://localhost:8080/jaeger/ui/trace/$${__value.raw}

          urlDisplayLabel: View in Jaeger UI
  name: Prometheus
  type: prometheus

      uid: webstore-metrics
  url: http://opentelemetry-demo-prometheus-server:9090

    - editable: true
  isDefault: false
  name: Jaeger
  type: jaeger
  uid: webstore-traces

      url: http://opentelemetry-demo-jaeger-query:16686/jaeger/ui
- access: proxy

      editable: true
  isDefault: false
  jsonData:
    database: otel
    flavor:
     opensearch
    logLevelField: severity
    logMessageField: body
    pplEnabled:
     true
    timeField: observedTimestamp
    version: 2.18.0
  name: OpenSearch

      type: grafana-opensearch-datasource
  url: http://otel-demo-opensearch:9200/
"
  grafana.ini: '[analytics]

    check_for_updates = true

    [auth]

    disable_login_form = true

    [auth.anonymous]

    enabled = true

    org_name = Main Org.

    org_role = Admin

    [grafana_net]

    url = https://grafana.net

    [log]

    mode = console

    [paths]

    data = /var/lib/grafana/

    logs = /var/log/grafana

    plugins = /var/lib/grafana/plugins

    provisioning = /etc/grafana/provisioning

    [server]

    domain = ''''

    root_url = %(protocol)s://%(domain)s:%(http_port)s/grafana

    serve_from_sub_path = true

    '
  plugins: grafana-opensearch-datasource
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: 11.3.0
  name: opentelemetry-demo-grafana
  namespace: otel-demo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: 11.3.0
  name: opentelemetry-demo-grafana
  namespace: otel-demo
rules: []
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: 11.3.0
  name: opentelemetry-demo-grafana
  namespace: otel-demo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: opentelemetry-demo-grafana
subjects:
- kind: ServiceAccount
  name: opentelemetry-demo-grafana
  namespace: otel-demo
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: 11.3.0
  name: opentelemetry-demo-grafana
  namespace: otel-demo
spec:
  ports:
  - name: service
    port: 80
    protocol: TCP
    targetPort: 3000
  selector:
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: grafana
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: opentelemetry-demo
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: 11.3.0
  name: opentelemetry-demo-grafana
  namespace: otel-demo
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: opentelemetry-demo
      app.kubernetes.io/name: grafana
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: 66402109ab73b3549330f38a66f20b78067ca4fdd1b77fc12fd760727d05f34c
        checksum/sc-dashboard-provider-config: e70bf6a851099d385178a76de9757bb0bef8299da6d8443602590e44f05fdf24
        checksum/secret: bed677784356b2af7fb0d87455db21f077853059b594101a4f6532bfbd962a7f
        kubectl.kubernetes.io/default-container: grafana
      labels:
        app.kubernetes.io/instance: opentelemetry-demo
        app.kubernetes.io/name: grafana
    spec:
      automountServiceAccountToken: true
      containers:
      - env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              key: admin-user
              name: opentelemetry-demo-grafana
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: admin-password
              name: opentelemetry-demo-grafana
        - name: GF_INSTALL_PLUGINS
          valueFrom:
            configMapKeyRef:
              key: plugins
              name: opentelemetry-demo-grafana
        - name: GF_PATHS_DATA
          value: /var/lib/grafana/
        - name: GF_PATHS_LOGS
          value: /var/log/grafana
        - name: GF_PATHS_PLUGINS
          value: /var/lib/grafana/plugins
        - name: GF_PATHS_PROVISIONING
          value: /etc/grafana/provisioning
        image: docker.io/grafana/grafana:11.3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          timeoutSeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: grafana
          protocol: TCP
        - containerPort: 9094
          name: gossip-tcp
          protocol: TCP
        - containerPort: 9094
          name: gossip-udp
          protocol: UDP
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
          limits:
            memory: 150Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /etc/grafana/grafana.ini
          name: config
          subPath: grafana.ini
        - mountPath: /var/lib/grafana
          name: storage
        - mountPath: /var/lib/grafana/dashboards/default
          name: dashboards-default
        - mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
          name: config
          subPath: datasources.yaml
        - mountPath: /etc/grafana/provisioning/dashboards/dashboardproviders.yaml
          name: config
          subPath: dashboardproviders.yaml
      enableServiceLinks: true
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      serviceAccountName: opentelemetry-demo-grafana
      volumes:
      - configMap:
          name: opentelemetry-demo-grafana
        name: config
      - configMap:
          name: opentelemetry-demo-grafana-dashboards
        name: dashboards-default
      - emptyDir: {}
        name: storage
